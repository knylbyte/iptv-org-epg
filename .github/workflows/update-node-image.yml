name: Update Node Image Tag

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *"

permissions:
  contents: write

concurrency:
  group: update-node-image
  cancel-in-progress: false

jobs:
  update:
    name: Check and Bump NODE_IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure jq installed
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Step 1 — Current version from Dockerfile
        id: current
        shell: bash
        run: |
          set -euo pipefail

          echo ""
          echo "🔎  Reading current version from Dockerfile..."
          echo ""

          current_tag=$(sed -n 's/^ARG NODE_IMAGE=\(.*\)$/\1/p' Dockerfile)
          if [[ -z "$current_tag" ]]; then
            echo "❌  Could not find current NODE_IMAGE in Dockerfile" >&2
            exit 1
          fi

          # Extract full semver prefix if present (e.g. 22.9.0 from 22.9.0-alpine)
          semver_prefix=$(echo "$current_tag" | cut -d'-' -f1)
          if [[ "$semver_prefix" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            current_version="$semver_prefix"
          else
            current_version=""
          fi

          # Extract major (prefer from semver; else from tag start)
          if [[ -n "${current_version}" ]]; then
            current_major=${current_version%%.*}
          else
            current_major=$(echo "$current_tag" | sed -n 's/^\([0-9][0-9]*\).*$/\1/p')
          fi

          echo "current_tag=$current_tag" >> "$GITHUB_OUTPUT"
          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"
          echo "current_major=$current_major" >> "$GITHUB_OUTPUT"

          echo "✅  Current tag:        $current_tag"
          echo "✅  Current semver:     ${current_version:-N/A}"
          echo "✅  Current major:      ${current_major:-N/A}"
          echo ""

      - name: Step 2 — Latest Node tags per architecture (curl with retries)
        id: latest
        shell: bash
        env:
          UA: NodeImageUpdater (+github.com/${{ github.repository }})
        run: |
          set -euo pipefail

          echo ""
          echo "🌐  Fetching latest Node alpine tags per architecture..."
          echo ""

          # Collect candidate tags like "<major>-alpine" (e.g., 24-alpine, 23-alpine ...)
          tags_raw=""
          url="https://hub.docker.com/v2/repositories/library/node/tags?page_size=100"
          for _ in 1 2 3 4 5; do
            page=$(curl -fsSL -H "User-Agent: $UA" --retry 3 --retry-delay 2 --retry-connrefused --retry-all-errors "$url")
            names=$(echo "$page" | jq -r '.results[].name')
            tags_raw+=$'\n'"$names"
            next=$(echo "$page" | jq -r '.next // empty')
            [[ -n "$next" ]] || break
            url="$next"
          done

          candidates=$(echo "$tags_raw" \
            | grep -E '^[0-9]+-alpine$' \
            | sed 's/-alpine$//' \
            | sort -n | tac \
            | awk '!seen[$0]++' \
            | sed 's/$/-alpine/')

          if [[ -z "$candidates" ]]; then
            echo "❌  Could not collect candidate Node alpine tags from Docker Hub" >&2
            exit 1
          fi

          echo "🔎  Candidates (descending):"
          echo "$candidates" | head -20 | sed 's/^/   • /'
          echo ""

          # Helper to check tag supports an architecture
          supports_arch() {
            local tag="$1" arch="$2"
            local json
            json=$(curl -fsSL -H "User-Agent: $UA" --retry 3 --retry-delay 2 --retry-connrefused --retry-all-errors \
                   "https://hub.docker.com/v2/repositories/library/node/tags/${tag}") || return 1
            case "$arch" in
              amd64)
                echo "$json" | jq -e '.images[] | select(.os=="linux" and .architecture=="amd64")' >/dev/null 2>&1 ;;
              arm64)
                echo "$json" | jq -e '.images[] | select(.os=="linux" and .architecture=="arm64")' >/dev/null 2>&1 ;;
              armv7)
                echo "$json" | jq -e '.images[] | select(.os=="linux" and .architecture=="arm" and ((.variant // "") | ascii_downcase)=="v7")' >/dev/null 2>&1 ;;
              *) return 1;;
            esac
          }

          amd64_tag=""; arm64_tag=""; armv7_tag=""
          while IFS= read -r tag; do
            [[ -z "$amd64_tag" ]] && supports_arch "$tag" amd64 && amd64_tag="$tag"
            [[ -z "$arm64_tag" ]] && supports_arch "$tag" arm64 && arm64_tag="$tag"
            [[ -z "$armv7_tag" ]] && supports_arch "$tag" armv7 && armv7_tag="$tag"
            [[ -n "$amd64_tag" && -n "$arm64_tag" && -n "$armv7_tag" ]] && break || true
          done <<< "$candidates"

          if [[ -z "$amd64_tag" || -z "$arm64_tag" || -z "$armv7_tag" ]]; then
            echo "❌  Failed to find per-arch tags: amd64='$amd64_tag' arm64='$arm64_tag' armv7='$armv7_tag'" >&2
            exit 1
          fi

          amd64_major=${amd64_tag%%-*}
          arm64_major=${arm64_tag%%-*}
          armv7_major=${armv7_tag%%-*}

          echo "amd64_tag=$amd64_tag" >> "$GITHUB_OUTPUT"
          echo "arm64_tag=$arm64_tag" >> "$GITHUB_OUTPUT"
          echo "armv7_tag=$armv7_tag" >> "$GITHUB_OUTPUT"
          echo "amd64_major=$amd64_major" >> "$GITHUB_OUTPUT"
          echo "arm64_major=$arm64_major" >> "$GITHUB_OUTPUT"
          echo "armv7_major=$armv7_major" >> "$GITHUB_OUTPUT"

          echo "✅  Latest amd64 tag:   $amd64_tag"
          echo "✅  Latest arm64 tag:   $arm64_tag"
          echo "✅  Latest armv7 tag:   $armv7_tag"
          echo ""

      - name: Step 3 — Update Dockerfile and build workflow if newer
        id: update
        shell: bash
        run: |
          set -euo pipefail
          echo ""
          echo "🧮  Comparing versions and updating if needed..."
          echo ""
          # Use amd64 tag as default for Dockerfile
          amd64_tag='${{ steps.latest.outputs.amd64_tag }}'
          arm64_tag='${{ steps.latest.outputs.arm64_tag }}'
          armv7_tag='${{ steps.latest.outputs.armv7_tag }}'

          updated=false

          # 3a) Update Dockerfile default ARG to amd64 tag if changed
          current_tag='${{ steps.current.outputs.current_tag }}'
          if [[ "$current_tag" != "$amd64_tag" ]]; then
            echo "✏️  Updating Dockerfile: $current_tag  →  $amd64_tag"
            sed -i.bak -E "s/^(ARG NODE_IMAGE=).*/\\1${amd64_tag}/" Dockerfile
            rm -f Dockerfile.bak
            updated=true
          else
            echo "ℹ️  Dockerfile already uses amd64 tag ($amd64_tag)"
          fi

          # 3b) Update per-arch node_image values in build workflow
          WF=.github/workflows/fetch-upstream-and-rebuild.yml
          awk -v a="$amd64_tag" -v b="$arm64_tag" -v c="$armv7_tag" '
            BEGIN{section=""}
            /- platform: linux\/amd64/ { section="amd64" }
            /- platform: linux\/arm64/ { section="arm64" }
            /- platform: linux\/arm\/v7/ { section="armv7" }
            section=="amd64" && $1=="node_image:" { print "            node_image: " a; next }
            section=="arm64" && $1=="node_image:" { print "            node_image: " b; next }
            section=="armv7" && $1=="node_image:" { print "            node_image: " c; next }
            { print }
          ' "$WF" > "$WF.tmp"

          if ! cmp -s "$WF" "$WF.tmp"; then
            mv "$WF.tmp" "$WF"
            echo "✏️  Updated per-arch node_image in $WF"
            updated=true
          else
            rm -f "$WF.tmp"
            echo "ℹ️  Build workflow already up-to-date"
          fi

          if [[ "$updated" == true ]]; then
            echo "updated=true" >> "$GITHUB_OUTPUT"
            echo "new_tag=$amd64_tag" >> "$GITHUB_OUTPUT"
          else
            echo "updated=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Step 4 — Commit and push (triggers build workflow)
        if: steps.update.outputs.updated == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo ""
          echo "🚀  Committing and pushing changes to trigger build..."
          echo ""
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Dockerfile .github/workflows/fetch-upstream-and-rebuild.yml
          git commit -m "chore(docker): bump NODE_IMAGE to ${{ steps.update.outputs.new_tag }} and update per-arch matrix"
          git push

      - name: Summary
        if: always()
        run: |
          if [[ "${{ steps.update.outputs.updated }}" == "true" ]]; then
            printf "\n✅  Node base image updated to %s.\n" "${{ steps.update.outputs.new_tag }}"
            printf "🧱  Push to master triggers Docker image build workflow.\n\n"
          else
            printf "\n✅  Node base image already up-to-date.\n\n"
          fi
