name: Update Node Image Tag

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *"

permissions:
  contents: write

concurrency:
  group: update-node-image
  cancel-in-progress: false

jobs:
  update:
    name: Check and Bump NODE_IMAGE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Ensure jq installed
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Step 1 — Current version from Dockerfile
        id: current
        shell: bash
        run: |
          set -euo pipefail

          echo ""
          echo "🔎  Reading current version from Dockerfile..."
          echo ""

          current_tag=$(sed -n 's/^ARG NODE_IMAGE=\(.*\)$/\1/p' Dockerfile)
          if [[ -z "$current_tag" ]]; then
            echo "❌  Could not find current NODE_IMAGE in Dockerfile" >&2
            exit 1
          fi

          # Extract full semver prefix if present (e.g. 22.9.0 from 22.9.0-alpine)
          semver_prefix=$(echo "$current_tag" | cut -d'-' -f1)
          if [[ "$semver_prefix" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            current_version="$semver_prefix"
          else
            current_version=""
          fi

          # Extract major (prefer from semver; else from tag start)
          if [[ -n "${current_version}" ]]; then
            current_major=${current_version%%.*}
          else
            current_major=$(echo "$current_tag" | sed -n 's/^\([0-9][0-9]*\).*$/\1/p')
          fi

          echo "current_tag=$current_tag" >> "$GITHUB_OUTPUT"
          echo "current_version=$current_version" >> "$GITHUB_OUTPUT"
          echo "current_major=$current_major" >> "$GITHUB_OUTPUT"

          echo "✅  Current tag:        $current_tag"
          echo "✅  Current semver:     ${current_version:-N/A}"
          echo "✅  Current major:      ${current_major:-N/A}"
          echo ""

      - name: Step 2 — Latest Node version via curl (with retries)
        id: latest
        shell: bash
        env:
          UA: NodeImageUpdater (+github.com/${{ github.repository }})
        run: |
          set -euo pipefail

          echo ""
          echo "🌐  Fetching latest Node version..."
          echo ""

          latest_version=$(
            curl -fsSL \
              -H "User-Agent: $UA" \
              -H "Accept: application/json" \
              --retry 3 --retry-delay 2 --retry-connrefused --retry-all-errors \
              "https://nodejs.org/dist/index.json" \
            | jq -r '.[].version' \
            | sed 's/^v//' \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
            | sort -V \
            | tail -1
          )

          if [[ -z "$latest_version" ]]; then
            echo "❌  Failed to determine latest Node version" >&2
            exit 1
          fi

          latest_major=${latest_version%%.*}

          echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"
          echo "latest_major=$latest_major" >> "$GITHUB_OUTPUT"
          echo "✅  Latest Node:        $latest_version"
          echo "✅  Latest major:       $latest_major"
          echo ""

      - name: Step 3 — Update Dockerfile if newer
        id: update
        shell: bash
        run: |
          set -euo pipefail
          echo ""
          echo "🧮  Comparing versions and updating if needed..."
          echo ""
          current_tag='${{ steps.current.outputs.current_tag }}'
          current_version='${{ steps.current.outputs.current_version }}'
          current_major='${{ steps.current.outputs.current_major }}'
          latest_version='${{ steps.latest.outputs.latest_version }}'
          latest_major='${{ steps.latest.outputs.latest_major }}'

          new_tag=""
          updated="false"

          if [[ -n "$current_version" ]]; then
            # Full semver currently in use; compare semver (natural sort)
            max=$(printf '%s\n%s\n' "$current_version" "$latest_version" | sort -V | tail -1)
            if [[ "$max" == "$latest_version" && "$latest_version" != "$current_version" ]]; then
              new_tag="${latest_version}-alpine"
              updated="true"
            fi
          else
            # Only major currently in use; compare majors
            if [[ -n "$current_major" && "$latest_major" =~ ^[0-9]+$ && "$current_major" =~ ^[0-9]+$ ]]; then
              if (( latest_major > current_major )); then
                new_tag="${latest_major}-alpine"
                updated="true"
              fi
            fi
          fi

          if [[ "$updated" == "true" ]]; then
            echo "✏️  Updating Dockerfile: $current_tag  →  $new_tag"
            sed -i.bak -E "s/^(ARG NODE_IMAGE=).*/\\1${new_tag}/" Dockerfile
            rm -f Dockerfile.bak
            echo "updated=true" >> "$GITHUB_OUTPUT"
            echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          else
            echo "ℹ️  No update needed"
            echo "updated=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Step 4 — Commit and push (triggers build workflow)
        if: steps.update.outputs.updated == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo ""
          echo "🚀  Committing and pushing changes to trigger build..."
          echo ""
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Dockerfile
          git commit -m "chore(docker): bump NODE_IMAGE to ${{ steps.update.outputs.new_tag }}"
          git push

      - name: Summary
        if: always()
        shell: bash
        run: |
          if [[ "${{ steps.update.outputs.updated }}" == "true" ]]; then
            printf "\n✅  Node base image updated to %s.\n" "${{ steps.update.outputs.new_tag }}"
            printf "🧱  Push to master triggers Docker image build workflow.\n\n"
          else
            printf "\n✅  Node base image already up-to-date.\n\n"
          fi
