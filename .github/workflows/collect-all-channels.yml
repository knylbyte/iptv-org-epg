name: Build all.channels.xml

on:
  workflow_dispatch:
  push:
    paths:
      - "sites/**"

permissions:
  contents: write
  actions: write

concurrency:
  group: all-channels-xml
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Step 1 - Honor .gitattributes (CRLF policy)
        run: |
          # Do not fight .gitattributes; avoid extra auto-conversions
          git config --global core.autocrlf false
          git config --global core.safecrlf false


      - name: Step 2 - Install xmllint (libxml2-utils)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libxml2-utils

      - name: Step 3 - Build combined all.channels.xml
        shell: bash
        run: |
          set -euo pipefail

          # Collect all *.channels.xml files under ./sites (also matches <channel>.*.channels.xml)
          mapfile -d '' -t FILES < <(find sites -type f -name '*.channels.xml' -print0 | sort -z)
          if (( ${#FILES[@]} == 0 )); then
            echo "No *.channels.xml files found under ./sites — nothing to do."
            exit 0
          fi

          TMP="$(mktemp)"
          SKIPPED=0
          TOTAL_FROM_FILES=0

          # Namespace-agnostic XPath expression:
          #  - primary: //*[local-name()='channels']/*[local-name()='channel']
          #  - fallback (non-namespaced): //channels/channel
          NSA_XPATH="//*[local-name()='channels']/*[local-name()='channel']"

          {
            printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>'
            printf '%s\n' '<channels>'
            for f in "${FILES[@]}"; do
              out="$(xmllint --xpath "$NSA_XPATH" "$f" 2>/dev/null || true)"
              if [ -z "$out" ]; then
                out="$(xmllint --xpath '//channels/channel' "$f" 2>/dev/null || true)"
              fi

              if [ -n "$out" ]; then
                printf '%s\n' "$out"
                # count how many channel nodes we extracted from this file
                c="$(printf '%s' "$out" | grep -oi '<channel\b' | wc -l | tr -d '[:space:]')"
                TOTAL_FROM_FILES=$((TOTAL_FROM_FILES + c))
              else
                echo "WARN: Could not parse or no <channel> nodes found in: $f" >&2
                ((SKIPPED++)) || true
              fi
            done
            printf '%s\n' '</channels>'
          } > "$TMP"

          # Pretty-print and write to the repository root
          xmllint --format "$TMP" -o all.channels.xml

          # Count channels in the final merged file
          CHANNEL_COUNT="$(grep -oi '<channel\b' all.channels.xml | wc -l | tr -d '[:space:]')"
          echo "Generated all.channels.xml with ${CHANNEL_COUNT} channel entries (raw from files: ${TOTAL_FROM_FILES})."

          # Export stats for later steps
          echo "CHANNEL_COUNT=${CHANNEL_COUNT}" >> "$GITHUB_ENV"
          echo "FILES_SCANNED=${#FILES[@]}" >> "$GITHUB_ENV"
          echo "FILES_SKIPPED=${SKIPPED}" >> "$GITHUB_ENV"

          # Save previous version from HEAD (or minimal empty stub)
          if git rev-parse --verify HEAD >/dev/null 2>&1 && git show HEAD:all.channels.xml >/dev/null 2>&1; then
            git show HEAD:all.channels.xml > old.all.channels.xml || true
          else
            printf '%s' '<?xml version="1.0" encoding="UTF-8"?><channels/>' > old.all.channels.xml
          fi

      - name: Step 4 - Generate diff script (changes.py)
        id: gen_diff
        env:
          CHANGES_PY: |-
            import sys, hashlib, xml.etree.ElementTree as ET

            def load(path):
                try:
                    t = ET.parse(path)
                    root = t.getroot()
                except Exception:
                    return {}
                items = {}
                for ch in root.findall('channel'):
                    key = ch.get('id')
                    data = ET.tostring(ch, encoding='utf-8')
                    h = hashlib.sha256(data).hexdigest()
                    if key is None:
                        key = h  # fallback if no id attribute
                    items[key] = h
                return items

            old = load(sys.argv[1] if len(sys.argv) > 1 else '')
            new = load(sys.argv[2] if len(sys.argv) > 2 else '')

            added    = len([k for k in new.keys() - old.keys()])
            removed  = len([k for k in old.keys() - new.keys()])
            modified = len([k for k in new.keys() & old.keys() if new[k] != old[k]])

            print(f"ADDED")
            print(f"REMOVED")
            print(f"MODIFIED")

        run: |
          set -euo pipefail
          printf "%s" "$CHANGES_PY" > changes.py

      - name: Step 5 - Compute diff and commit if changed
        id: update
        shell: bash
        run: |
          set -euo pipefail

          # Run diff script and export counts
          python3 changes.py old.all.channels.xml all.channels.xml > changes.env
          source changes.env
          TOTAL_CHANGED=$((ADDED + REMOVED + MODIFIED))

          # Convert to CRLF to comply with .gitattributes (* text eol=crlf)
          # Robust: first strip any CR, then write CRLF
          awk '{ sub(/\r$/, ""); printf "%s\r\n", $0 }' all.channels.xml > all.channels.xml.crlf
          mv all.channels.xml.crlf all.channels.xml

          # Stage & commit if changed
          git add all.channels.xml
          if git diff --quiet --cached; then
            echo "No changes to commit — skipping."
            DID_COMMIT="no"
            echo "updated=false" >> "$GITHUB_OUTPUT"
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: update all.channels.xml (${CHANNEL_COUNT} channels; +${ADDED} -${REMOVED} ~${MODIFIED}, total ${TOTAL_CHANGED})"
            git push
            DID_COMMIT="yes"
            echo "updated=true" >> "$GITHUB_OUTPUT"
          fi

          # Build summary
          {
            echo "### all.channels.xml build"
            echo
            echo "- Files scanned: ${FILES_SCANNED}"
            echo "- Files skipped (parse/empty): ${FILES_SKIPPED}"
            echo "- Channel entries in output: ${CHANNEL_COUNT}"
            echo "- Changes vs. previous:"
            echo "  - Added: ${ADDED}"
            echo "  - Removed: ${REMOVED}"
            echo "  - Modified: ${MODIFIED}"
            echo "  - **Total changed**: ${TOTAL_CHANGED}"
            echo "- Committed: ${DID_COMMIT}"
          } >> "$GITHUB_STEP_SUMMARY"
          
          echo "added=${ADDED}" >> "$GITHUB_OUTPUT"
          echo "removed=${REMOVED}" >> "$GITHUB_OUTPUT"
          echo "modified=${MODIFIED}" >> "$GITHUB_OUTPUT"

      - name: Step 6 — Trigger Docker Build via workflow_dispatch
        if: steps.update.outputs.updated == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ADDED=${{ steps.update.outputs.added }}
          REMOVED=${{ steps.update.outputs.removed }}
          MODIFIED=${{ steps.update.outputs.modified }}
          TOTAL_CHANGED=$((ADDED + REMOVED + MODIFIED))
          gh workflow run docker-build.yml --ref master -f channels_updatet="${TOTAL_CHANGED} updated channels"
